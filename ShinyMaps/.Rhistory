#RShiny
#libraries
require(tidyverse)
require(haven)
require(dplyr)
require(ggplot2)
require(zip)
require(utils)
require(stringr)
require(sf)
require(rsconnect)
require(leaflet)
require(shiny)
#read in the shapefile
shapefile1 <- st_read("C:\\Users\\aeroa\\OneDrive - The Ohio State University\\Franklinton\\Analysis\\Axle\\Moving Families\\ShinyMaps\\ShinyMapOutFton.shp")
#Map it
server <- function(input, output, session) {
filtered_data <- reactive({
if (input$year == "Total Frequency") {
shapefile1 %>%
mutate(Freqncy = TtlFrqn)
} else {
shapefile1 %>%
filter(year == input$year)
}
})
output$map <- renderLeaflet({
data1 <- filtered_data()
# Define unique color palettes for yearly frequency and total frequency
color_palette_yearly <- colorFactor(
palette = c("#f7fbff", "#6baed6", "#08519c"),  # Blue shades
domain = data1$Freqncy,
na.color = "transparent")
color_palette_total <- colorFactor(
palette = c("#f7fbff", "#6baed6", "#08519c"),  # Blue shades
domain = data1$TtlFrqn,
na.color = "transparent")
color_palette <- if (input$year == "Total Frequency") color_palette_total else color_palette_yearly
leaflet(data1) %>%
addTiles() %>%
addPolygons(
fillColor = ~color_palette(Freqncy),
fillOpacity = 0.7,
color = "#bcbddc",
stroke = TRUE,
weight = 1,
popup = ~paste(
"<strong>Tract ID:</strong>", FIPS,
"<br>",
"<strong>Freqncy:</strong>", Freqncy
)
) %>%
addLegend(
pal = color_palette,
values = ~Freqncy,
title = if (input$year == "Total Frequency") "Total Frequency" else "Yearly Frequency",
opacity = 0.7,
position = "bottomright"
)
})
}
ui <- fluidPage(
titlePanel("Moved Families Frequency Map"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year or Total:",
choices = c(unique(frequency_table$year), "Total Frequency"))
),
mainPanel(
leafletOutput("map")
)
)
)
shiny::runApp('~/GitHub/MapBeforeFranklinton')
#Mapped in ShinyMapB4FtonAPP.R
st_write(obj = shapefile_b4_FT, dsn = "C:\\Users\\aeroa\\OneDrive\\Documents\\GitHub\\MapBeforeFranklinton\\B4Fton.shp", driver = "ESRI Shapefile")
require(sf)
#Mapped in ShinyMapB4FtonAPP.R
st_write(obj = shapefile_b4_FT, dsn = "C:\\Users\\aeroa\\OneDrive\\Documents\\GitHub\\MapBeforeFranklinton\\B4Fton.shp", driver = "ESRI Shapefile")
# Read in the shapefile
shapefile2 <- st_read("C:\\Users\\aeroa\\OneDrive - The Ohio State University\\Franklinton\\Analysis\\Axle\\Moving Families\\ShinyMaps\\B4Fton.shp")
#Mapped in ShinyMapB4FtonAPP.R
st_write(obj = shapefile2, dsn = "C:\\Users\\aeroa\\OneDrive\\Documents\\GitHub\\MapBeforeFranklinton\\B4Fton.shp", driver = "ESRI Shapefile")
runApp('~/GitHub/MapBeforeFranklinton')
library(leaflet)
runApp('~/GitHub/MapBeforeFranklinton')
library(dplyr)
runApp('~/GitHub/MapBeforeFranklinton')
runApp('~/GitHub/MapBeforeFranklinton')
rsconnect::setAccountInfo(name='9uxxz2-jskepes1', token='17438341F12E3ACACD13CEB5EDEF6E0C', secret='7n3gDix4TN4ntnniQQXQLWY0ecDvqzEbdWzBPQ67')
runApp('~/GitHub/MapBeforeFranklinton')
runApp('~/GitHub/MapBeforeFranklinton')
# Create a directory to store the shapefile
dir.create("shapefile2")
# Define the base URL for the shapefile components on GitHub
base_url <- "https://github.com/jskepes1/Franklinton/tree/857d6e9d091ce6ee26939993235a4788844ddf34/MapBeforeFranklinton"
# Define the filenames of the shapefile components
files <- c("B4Fton.shp", "B4Fton.dbf", "B4Fton.prj", "B4Fton.shx")
# Download each file
for (file in files) {
download.file(url = paste0(base_url, "/", file), destfile = paste0("shapefile2/", file))
}
shapefile_path <- "shapefile2/shapefile2.shp"
shapefile2 <- st_read(shapefile_path)
shapefile_path <- "shapefile2/B4Fton.shp"
shapefile2 <- st_read(shapefile_path)
